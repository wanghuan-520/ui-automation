---
description: 
globs: 
alwaysApply: false
---
# CSV格式功能测试用例生成规范

## 目标要求
当用户请求生成功能测试用例时，**直接创建CSV格式的测试用例文档**，并将CSV文件存放在`/testcase`目录下。不需要先生成Markdown格式文件。

## CSV格式规范

### 文件命名规范
- 文件名格式：`{需求名称}-测试用例.csv`
- 存放目录：`/test-cases/{版本号}/`
- 示例：`/test-cases/v1.19.0/用户登录功能-测试用例.csv`

### CSV文件结构
- CSV文件包含一个测试用例清单，使用UTF-8编码，以逗号作为分隔符。

### 测试用例清单列结构
| 列名       | 说明                     | 必填 |
|------------|--------------------------|------|
| 用例编号   | TC001、TC002、TC003格式 | 是   |
| 功能模块   | 所属功能模块名称         | 是   |
| 功能测试点 | 具体的功能测试点名称     | 是   |
| 用例标题   | 简洁描述测试场景         | 是   |
| 优先级     | P0/P1/P2                 | 是   |
| 前置条件   | 执行用例前需要满足的条件 | 否   |
| 测试步骤   | 每个步骤带序号且换行     | 是   |
| 预期结果   | 期望的系统响应和状态     | 是   |
| 实际结果   | 实际测试执行后的结果     | 否   |

## 测试用例设计方法与技巧

### 必须应用的6种测试设计方法
- **等价类划分（Equivalence Class Partitioning）**
  - 将输入数据划分为有效的和无效的等价类
  - 从每个等价类中选取一个或少数代表性数据作为测试输入
  - 每个等价类至少设计1个测试用例
- **边界值分析（Boundary Value Analysis）**
  - 重点测试输入和输出的边界条件（最小值、最大值、略高于最小值、略低于最大值、空值、临界长度等）
  - 边界值分析是等价类划分的补充
  - 包括正常边界、异常边界、特殊边界测试
- **判定表驱动法（Decision Table Testing）**
  - 适用于有多个条件组合，并且每个组合对应不同操作的场景
  - 列出所有条件桩和动作桩，形成判定表
  - 确保所有条件组合都被测试覆盖
- **场景法（Use Case/Scenario Testing）**
  - 基于用户实际使用系统的场景来设计测试用例
  - 模拟用户操作流程，验证系统在真实场景下的行为
  - 包括正常场景、异常场景、边界场景
- **错误猜测法（Error Guessing）**
  - 基于经验、直觉和对系统薄弱环节的分析，推测可能存在的缺陷和错误
  - 常用于补充其他结构化测试方法
  - 关注系统容易出错的地方
- **状态迁移法（State Transition Testing）**
  - 适用于被测对象具有明确状态转换的系统或模块
  - 关注系统在不同状态之间的转换路径和事件触发
  - 验证状态转换的正确性和完整性

## 设计方法应用示例
以"昵称设置"功能为例，展示如何应用多种测试设计方法

### 等价类划分应用
- **有效等价类**：1-20字符，中英文数字，允许下划线和间隔号
- **无效等价类**：空值、超长字符、禁止特殊符号、纯符号

### 边界值分析应用
- **最小边界**：1个字符昵称（最小值）
- **最大边界**：20个字符昵称（最大值）
- **异常边界**：0个字符（最小值-1）、21个字符（最大值+1）

### 场景法应用
- **正常场景**：首次设置昵称完整流程
- **修改场景**：修改已有昵称流程
- **冲突场景**：昵称重复处理流程
- **验证场景**：设置后显示验证流程

### 错误推测法应用
- **安全测试**：特殊字符注入、脚本代码输入
- **兼容性测试**：表情符号、多语言字符
- **异常测试**：网络中断、并发操作

### 状态迁移法应用
- **状态定义**：未设置 → 设置中 → 已设置 → 修改中
- **转换测试**：各状态间的正常转换和异常转换
- **状态验证**：每个状态下的界面显示和功能可用性

---

## 设计原则
1. **独立性**：每个测试用例应能独立执行，不依赖其他用例结果
2. **可重复性**：测试用例应能多次执行并得到一致结果
3. **可验证性**：预期结果必须具体且可验证
4. **清晰性**：测试步骤和预期结果描述清晰、无歧义
5. **完整性**：测试用例包含执行所需的全部信息
6. **覆盖率优先**：优先保证测试覆盖率，确保功能验证的完整性

## 生成要求

### 必须要求
1. **直接生成**：直接使用edit_file工具创建CSV格式测试用例文件
2. **目录位置**：CSV文件必须存放在`/test-cases/{版本号}/`目录下
3. **数据完整性**：CSV文件必须包含所有必要的列和数据
4. **格式规范**：严格按照CSV格式要求创建文件，UTF-8编码，逗号分隔

### 数据生成规则
- 根据需求文档直接生成CSV测试用例数据
- 功能模块根据需求文档的章节结构确定
- 用例标题基于具体的测试场景描述
- 用例编号格式：TC001、TC002、TC003按顺序递增
- 测试步骤格式：每个步骤前加序号并换行，如：
  "1.点击头像编辑按钮\n2.选择1MB的JPG格式图片\n3.点击确认上传"
- 预期结果明确且可验证
- CSV文件中包含换行和特殊字符的内容需要用双引号包围并转义处理

## 工作流程（5步法）
1. **深度需求分析**：理解功能结构、业务规则、约束条件
2. **应用设计方法**：结合6种测试设计方法进行用例设计
3. **准备数据**：将测试用例整理为CSV格式数据
4. **创建CSV**：直接调用edit_file工具创建CSV文件
5. **验证结果**：确保CSV文件格式正确且覆盖率达标

## 使用工具
- 使用edit_file工具来创建和操作CSV文件：
  - 使用edit_file工具创建CSV格式的测试用例文件
  - 确保CSV文件路径使用正确的相对路径格式
  - 测试步骤列使用带序号的换行格式，每个步骤独立成行
  - 注意CSV格式中的换行符和特殊字符转义

## 验收标准

### 基本质量要求
- 文件能正常用Excel/文本编辑器打开，无格式错误
- 包含完整的测试用例信息
- 格式规范，易于阅读和编辑
- 支持后续的测试执行跟踪
- 测试用例覆盖需求文档中的所有功能点
- 用例编号、标题、步骤、预期结果等字段完整填写

### 测试用例质量标准
- **独立性**：每个测试用例应该独立执行，不依赖其他用例的结果
- **可重复性**：测试用例应该能够重复执行并得到一致的结果
- **可验证性**：预期结果必须是具体且可验证的
- **清晰性**：测试步骤和预期结果描述清晰，无歧义
- **完整性**：测试用例包含执行所需的所有信息

## 注意事项
1. **CSV格式优先**：严格按照CSV格式输出，不生成Markdown文件
2. **工具依赖**：使用edit_file工具进行CSV文件操作
3. **路径规范**：使用正确的相对路径格式，确保文件正确存放在testcase目录
4. **数据格式**：测试步骤使用序号+换行格式，便于阅读和执行
5. **编码规范**：使用UTF-8编码，确保中文字符正确显示
6. **字符转义**：CSV文件中包含逗号、双引号、换行符的内容需要用双引号包围并转义
7. **列结构简化**：去除测试状态和备注列，保持9列结构
8. **覆盖率优先**：优先保证测试覆盖率，确保功能验证的完整性