---
description: 
globs: 
alwaysApply: false
---
# FreeMind（.mm）功能测试用例规范指南

本文档旨在提供功能测试用例的FreeMind（.mm）格式编写规范，确保其结构化、内容清晰，并兼容FreeMind等思维导图工具的导入。

## 1. 基本原则
- 每个测试点单独成case，避免多个验证点合并
- 用例编号递增，命名简明
- 用例字段结构化，支持FreeMind(.mm)格式导出
- 所有测试用例必须满足本规范要求

## 2. 设计原则
1. **独立性**：每个测试用例应能独立执行，不依赖其他用例结果
2. **可重复性**：测试用例应能多次执行并得到一致结果
3. **可验证性**：预期结果必须具体且可验证
4. **清晰性**：测试步骤和预期结果描述清晰、无歧义
5. **完整性**：测试用例包含执行所需的全部信息
6. **覆盖率优先**：优先保证测试覆盖率，确保功能验证的完整性

## 3. 测试用例设计方法与技巧

### 3.1 必须应用的6种测试设计方法
- **等价类划分（Equivalence Class Partitioning）**
  - 将输入数据划分为有效的和无效的等价类
  - 从每个等价类中选取一个或少数代表性数据作为测试输入
  - 每个等价类至少设计1个测试用例
- **边界值分析（Boundary Value Analysis）**
  - 重点测试输入和输出的边界条件（最小值、最大值、略高于最小值、略低于最大值、空值、临界长度等）
  - 边界值分析是等价类划分的补充
  - 包括正常边界、异常边界、特殊边界测试
- **判定表驱动法（Decision Table Testing）**
  - 适用于有多个条件组合，并且每个组合对应不同操作的场景
  - 列出所有条件桩和动作桩，形成判定表
  - 确保所有条件组合都被测试覆盖
- **场景法（Use Case/Scenario Testing）**
  - 基于用户实际使用系统的场景来设计测试用例
  - 模拟用户操作流程，验证系统在真实场景下的行为
  - 包括正常场景、异常场景、边界场景
- **错误猜测法（Error Guessing）**
  - 基于经验、直觉和对系统薄弱环节的分析，推测可能存在的缺陷和错误
  - 常用于补充其他结构化测试方法
  - 关注系统容易出错的地方
- **状态迁移法（State Transition Testing）**
  - 适用于被测对象具有明确状态转换的系统或模块
  - 关注系统在不同状态之间的转换路径和事件触发
  - 验证状态转换的正确性和完整性

## 4. 设计方法应用示例
以"昵称设置"功能为例，展示如何应用多种测试设计方法

### 等价类划分应用
- **有效等价类**：1-20字符，中英文数字，允许下划线和间隔号
- **无效等价类**：空值、超长字符、禁止特殊符号、纯符号

### 边界值分析应用
- **最小边界**：1个字符昵称（最小值）
- **最大边界**：20个字符昵称（最大值）
- **异常边界**：0个字符（最小值-1）、21个字符（最大值+1）

### 场景法应用
- **正常场景**：首次设置昵称完整流程
- **修改场景**：修改已有昵称流程
- **冲突场景**：昵称重复处理流程
- **验证场景**：设置后显示验证流程

### 错误推测法应用
- **安全测试**：特殊字符注入、脚本代码输入
- **兼容性测试**：表情符号、多语言字符
- **异常测试**：网络中断、并发操作

### 状态迁移法应用
- **状态定义**：未设置 → 设置中 → 已设置 → 修改中
- **转换测试**：各状态间的正常转换和异常转换
- **状态验证**：每个状态下的界面显示和功能可用性

## 5. 用例字段定义与映射

### 5.1 统一字段定义
- 用例编号：唯一标识，递增编号或模块前缀+编号
- 用例名称：动词+对象+“测试”，简明描述单一测试点
- 模块/功能：归属模块或功能点
- 优先级：P0/P1/P2/P3
- 用例类型：功能测试/集成测试/性能测试/安全测试等
- 前置条件：本case执行前需满足的环境、数据、账号等
- 测试数据/参数：本case涉及的输入、边界、等价类等
- 测试步骤：每步操作，细化到单一动作
- 预期结果：每步对应的唯一验证点

### 5.2 FreeMind(.mm)格式映射
```xml
<node ID="ID_[数字]" MODIFIED="[timestamp]" TEXT="[用例编号]: [用例名称]" FOLDED="false">
    <node ID="ID_[数字+1]" TEXT="优先级: [P0/P1/P2/P3]"/>
    <node ID="ID_[数字+2]" TEXT="用例类型: [类型]"/>
    <node ID="ID_[数字+3]" TEXT="前置条件: [环境/数据/账号要求]"/>
    <node ID="ID_[数字+4]" TEXT="测试数据: [输入/边界/等价类]"/>
    <node ID="ID_[数字+5]" TEXT="测试步骤">
        <node ID="ID_[数字+6]" TEXT="1. [细化的单一动作1]"/>
        <node ID="ID_[数字+7]" TEXT="2. [细化的单一动作2]"/>
    </node>
    <node ID="ID_[数字+8]" TEXT="预期结果">
        <node ID="ID_[数字+9]" TEXT="1. [对应步骤1的验证点]"/>
        <node ID="ID_[数字+10]" TEXT="2. [对应步骤2的验证点]"/>
    </node>
</node>
```

## 6. 模块编号规范
- 统一前缀：如RENAME-、IAP-、SUB-等
- 每个模块从001开始递增，编号固定3位数字
- 格式：[前缀]-[3位数字]，如RENAME-001

## 7. 拆分原则
- 一个case只验证一个功能点或UI点
- 复杂流程拆分为多个case，每个case一个断言
- 保持信息一致性和完整性

## 8. FreeMind(.mm)格式示例
```xml
<!-- 订阅管理模块 -->
<node ID="ID_SUBSCRIPTION" MODIFIED="1710400000000" POSITION="right" TEXT="订阅管理" FOLDED="true">
    <node ID="ID_68" TEXT="SUB-001: 切换到周订阅测试" FOLDED="false">
        <node ID="ID_69" TEXT="优先级: P0"/>
        <node ID="ID_70" TEXT="用例类型: 集成测试"/>
        <node ID="ID_71" TEXT="前置条件: 用户已登录且环境正常"/>
        <node ID="ID_72" TEXT="测试数据: Weekly Premium $6"/>
        <node ID="ID_73" TEXT="测试步骤">
            <node ID="ID_74" TEXT="1. 进入订阅页面"/>
            <node ID="ID_75" TEXT="2. 选择Weekly Premium"/>
        </node>
        <node ID="ID_76" TEXT="预期结果">
            <node ID="ID_77" TEXT="1. 显示价格$6"/>
            <node ID="ID_78" TEXT="2. 显示just $0.85/day"/>
            <node ID="ID_79" TEXT="3. 显示Start for $6"/>
            <node ID="ID_80" TEXT="4. 显示Perfect for a 7-day glimpse into your future"/>
        </node>
    </node>
</node>
```

## 9. 生成规则
- 遵循字段定义和结构层级，所有信息均以节点形式展现
- 保持节点ID唯一性和递增性
- 正确设置节点的FOLDED属性
- 使用统一的时间戳格式
- 确保特殊字符正确转义
- FreeMind节点的TEXT属性内容中不得包含双引号(")，以避免XML解析错误 

## 11. 最佳实践
1. 先设计测试用例基本信息
2. 使用工具自动生成FreeMind格式
3. 人工审查确保信息一致性
4. 定期同步更新
5. 使用版本控制管理变更

## 12. PRD转测试用例规则
- 功能点识别、测试点提取、优先级划分
- 用例结构化，统一字段填充，步骤细化，预期结果定义
- 结构化信息自动生成FreeMind节点

## 13. 自动化转换规则（伪代码）
```python
# 生成FreeMind节点示例
def generate_mm(test_case):
    """
    <node ID="ID_{unique_id}" TEXT="{module_name}" FOLDED="true">
        <node ID="ID_{case_id}" TEXT="{case_number}: {case_name}">
            <node ID="ID_{priority_id}" TEXT="优先级: {priority}"/>
            <node ID="ID_{type_id}" TEXT="用例类型: {type}"/>
            <node ID="ID_{precond_id}" TEXT="前置条件: {precondition}"/>
            <node ID="ID_{data_id}" TEXT="测试数据: {test_data}"/>
            <node ID="ID_{steps_id}" TEXT="测试步骤">
                {steps_nodes}
            </node>
            <node ID="ID_{results_id}" TEXT="预期结果">
                {result_nodes}
            </node>
        </node>
    </node>
    """
```

## 14. 同步更新机制
- 使用Git管理FreeMind格式文件
- 保持commit信息一致性
- 定期运行一致性检查，自动识别信息不一致的用例
- 生成差异报告并提醒修正

## 15. 检查清单
- [ ] 是否完整识别所有功能点
- [ ] 是否合理拆分测试点
- [ ] 是否正确划分优先级
- [ ] 是否覆盖所有异常场景
- [ ] 是否包含完整测试步骤
- [ ] 是否有明确验证点
- [ ] FreeMind节点是否正确
- [ ] 是否保持ID唯一性
- [ ] 版本号是否同步
- [ ] 差异是否已处理
- [ ] 是否通过一致性检查

## 16. 生成测试用例文件要求
- 生成测试用例文件到 `test-cases/{版本号}/{需求名称}-测试用例.mm`

---

// ... 以上为FreeMind（.mm）格式测试用例设计规范，所有说明均为中文注释 ...

# XX功能测试用例
## 功能模块名称
### 功能测试点1（如：头像设置）
#### 子测试点1.1（如：上传规则校验）
##### 验证点1.1.1（如：文件格式校验）
###### 用例场景1.1.1.1（如：上传jpg格式头像）
####### 预期结果
- 成功上传，头像显示正常
###### 用例场景1.1.1.2（如：上传exe格式头像）
####### 预期结果
- 上传失败，提示"文件格式不支持"
##### 验证点1.1.2（如：文件大小校验）
###### 用例场景1.1.2.1（如：上传超大图片）
####### 预期结果
- 上传失败，提示"文件过大"
#### 子测试点1.2（如：裁剪功能校验）
##### 验证点1.2.1（如：裁剪后保存）
###### 用例场景1.2.1.1
####### 预期结果
- 裁剪后头像显示为新图片
### 功能测试点2（如：昵称规则）
#### 子测试点2.1（如：格式规则校验）
##### 验证点2.1.1
###### 用例场景2.1.1.1
####### 预期结果
- ...

# 用户管理模块测试用例
> 版本号：v1.0.0  
> 需求编号：REQ-001  
> 编写人：张三  
> 编写日期：2024-06-10

## 用户注册
### 邮箱注册
#### 邮箱格式校验
##### 合法邮箱
###### 当用户输入格式正确的邮箱（如user@example.com）时
- 系统允许注册，进入下一步
##### 非法邮箱
###### 当用户输入格式错误的邮箱（如user@@example..com）时
- 系统提示"邮箱格式不正确"，不允许注册

#### 邮箱唯一性校验
##### 已注册邮箱
###### 当用户输入已注册邮箱（如existing@example.com）时
- 系统提示"该邮箱已被注册"，不允许注册

### 密码规则
#### 密码长度
##### 最小长度
###### 当用户输入6位密码时
- 系统允许注册
###### 当用户输入5位密码时
- 系统提示"密码长度不足"，不允许注册