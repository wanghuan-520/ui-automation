---
description: 
globs: 
alwaysApply: false
---
# 功能测试用例规范指南

本文档旨在提供功能测试用例的编写规范，确保其格式统一、内容清晰，并兼容 XMind 等工具的导入。

## 设计方法与技巧

### 必须应用的6种测试设计方法
- **等价类划分（Equivalence Class Partitioning）**
  - 将输入数据划分为有效的和无效的等价类
  - 从每个等价类中选取一个或少数代表性数据作为测试输入
  - 每个等价类至少设计1个测试用例
- **边界值分析（Boundary Value Analysis）**
  - 重点测试输入和输出的边界条件（最小值、最大值、略高于最小值、略低于最大值、空值、临界长度等）
  - 边界值分析是等价类划分的补充
  - 包括正常边界、异常边界、特殊边界测试
- **判定表驱动法（Decision Table Testing）**
  - 适用于有多个条件组合，并且每个组合对应不同操作的场景
  - 列出所有条件桩和动作桩，形成判定表
  - 确保所有条件组合都被测试覆盖
- **场景法（Use Case/Scenario Testing）**
  - 基于用户实际使用系统的场景来设计测试用例
  - 模拟用户操作流程，验证系统在真实场景下的行为
  - 包括正常场景、异常场景、边界场景
- **错误猜测法（Error Guessing）**
  - 基于经验、直觉和对系统薄弱环节的分析，推测可能存在的缺陷和错误
  - 常用于补充其他结构化测试方法
  - 关注系统容易出错的地方
- **状态迁移法（State Transition Testing）**
  - 适用于被测对象具有明确状态转换的系统或模块
  - 关注系统在不同状态之间的转换路径和事件触发
  - 验证状态转换的正确性和完整性

## 设计方法应用示例
以"昵称设置"功能为例，展示如何应用多种测试设计方法

### 等价类划分应用
- **有效等价类**：1-20字符，中英文数字，允许下划线和间隔号
- **无效等价类**：空值、超长字符、禁止特殊符号、纯符号

### 边界值分析应用
- **最小边界**：1个字符昵称（最小值）
- **最大边界**：20个字符昵称（最大值）
- **异常边界**：0个字符（最小值-1）、21个字符（最大值+1）

### 场景法应用
- **正常场景**：首次设置昵称完整流程
- **修改场景**：修改已有昵称流程
- **冲突场景**：昵称重复处理流程
- **验证场景**：设置后显示验证流程

### 错误推测法应用
- **安全测试**：特殊字符注入、脚本代码输入
- **兼容性测试**：表情符号、多语言字符
- **异常测试**：网络中断、并发操作

### 状态迁移法应用
- **状态定义**：未设置 → 设置中 → 已设置 → 修改中
- **转换测试**：各状态间的正常转换和异常转换
- **状态验证**：每个状态下的界面显示和功能可用性

## 核心结构概览

功能测试用例文档的核心结构如下所示：

```markdown
# XX功能测试用例
## 功能模块名称
### 功能测试点1（例如：头像设置）
#### 验证点1.1（例如：上传规则校验）
##### 用例场景1.1.1
###### 预期结果
预期结果详情1
##### 用例场景1.1.2
###### 预期结果
预期结果详情2
#### 验证点1.2（例如：默认逻辑校验）
##### 用例场景1.2.1
###### 预期结果
- 预期结果详情1
### 功能测试点2（例如：昵称规则）
#### 验证点2.1（例如：格式规则校验）
##### 用例场景2.1.1
###### 预期结果
预期结果详情1
```

## 详细说明与要素

### 1. 文档主标题 (H1)
- **标记**：`#`
- **用途**：定义整个测试用例文档的最高层级标题。
- **示例**：
  ```markdown
  # 功能测试用例
  ```

### 2. 功能模块名称 (H2)
- **标记**：`##`
- **用途**：标识一个主要的功能模块、用户故事或被测单元。
- **组织**：模块名称前不建议使用数字序号，以保持简洁。
- **示例**：
  ```markdown
  ## 用户登录功能
  ```

### 3. 功能测试点 (H3)
- **标记**：`###`
- **用途**：标识一个具体的功能点或一类相关的测试验证项。用于更好地组织同一功能模块下的不同测试关注点。每个功能测试点下可以包含多个 H4 级别的"验证点"。
- **格式**：直接写明功能测试点的名称。
- **示例**：
  ```markdown
  ### 头像设置
  ### 昵称规则与唯一性校验
  ```

### 4. 验证点 (H4)
- **标记**：`####`
- **用途**：在一个"功能测试点"下，对更细致的验证方面或具体规则进行分类。例如，在"头像设置"功能测试点下，可以有"上传规则校验"、"裁剪功能校验"等验证点。每个验证点下可以包含多个 H5 级别的"用例场景"。
- **规范**：验证点名称应清晰概括其验证内容。
- **示例**：
  ```markdown
  #### 上传规则校验
  #### 唯一性校验
  #### 动态格式化显示
  ```

### 5. 用例场景 (H5)
- **标记**：`#####`
- **用途**：简洁、唯一且清晰地概括单个测试用例的核心目的、所验证的特定场景或关键操作。此标题应尽可能包含关键的动作和条件信息。
- **规范**：H5 标题前不应有数字序号。
- **示例**：
  ```markdown
  ##### 用户使用有效的、未注册的邮箱和符合要求的密码进行注册
  ```

### 6. 预期结果 (H6)
- **标记**：`######`
- **引导词**：通常标题为"###### 预期结果"
- **用途**：定义在执行了 H5 所描述的用例场景后，系统应表现出的具体、可测量的状态、输出或行为。
- **位置**：紧跟在对应的 H5"用例场景"标题之后。
- **格式**：H6 标题下通过一个或多个无序列表项（以 `-` 开始）列出详细的预期结果。
- **示例**：
  ```markdown
  ###### 预期结果
  - 用户注册成功。
  - 系统应向用户显示"注册成功"提示。
  ```

## 示例模板

以下是一个完整的示例，展示了如何应用上述新规范：

```markdown
# 用户管理模块测试用例
## 用户注册功能
### 用户注册信息校验
#### 邮箱和密码规则校验
##### 用户使用有效的、未注册的邮箱和符合要求的密码进行注册
###### 预期结果
- 用户注册成功。
- 系统应向用户显示"注册成功，请检查邮箱完成账户激活"的提示。
- 数据库中应新增一条对应的用户记录，用户状态标记为"待激活"。
##### 用户尝试使用已注册的邮箱 (existing@example.com) 进行注册
###### 预期结果
- 用户注册操作失败。
- 系统应向用户显示"该邮箱已被注册，请尝试其他邮箱或直接登录"的提示。
- 数据库中用户记录总数不应发生变化。
## 用户登录功能
### 用户名密码登录
#### 凭据正确性校验
##### 已激活用户使用正确的凭据 (user@example.com) 成功登录
###### 预期结果
- 用户登录成功。
- 系统应导航到用户的主页或仪表盘。
- 用户会话被正确创建。
##### 用户尝试使用不存在的邮箱地址登录
###### 预期结果
- 用户登录失败。
- 系统应提示"账号不存在或密码错误"。
```

## 测试用例管理建议
- 使用版本控制管理测试用例文档。
- 定期更新测试用例，确保其与产品功能保持一致。
- 保持文档结构和命名风格的一致性。
- 及时记录测试执行结果。
- 定期进行测试用例评审和优化。

## 要求
- 生成测试用例文件到 `test-cases/{版本号}/{需求名称}-测试用例.md`

## 注意事项
1. **Markdown 格式**：严格遵守上述 Markdown 层级和格式（H1-H6）。这种结构化的层级对于工具解析（如 XMind 导入）非常重要。
2. **清晰度与简洁性**：用例场景、标题是核心，应简洁明了地描述测试的场景和关键操作/条件。所有描述，包括 H3 的"功能测试点"、H4 的"验证点"和 H6 下的"预期结果"列表，都应清晰、无歧义。
3. **操作步骤的缺失**：此规范中没有明确的"操作步骤"部分。因此，"##### 用例场景"的标题需要承载更多描述场景和主要交互的信息。如果非常复杂的操作流程难以在标题中概括，可以考虑拆分为多个更细的用例场景。
4. **可验证性**："预期结果"必须是具体且可验证的。
5. **独立性**：尽量确保每个"用例场景"的独立性。
6. **测试数据**：关键的测试数据（如特定用户名、特殊输入值）应直接体现在 `##### 用例场景` 的标题中，或在相关 H4"验证点"下进行说明（如果适用）。
7. **XMind 兼容性**：此分层结构通常能很好地导入 XMind 等思维导图工具，每一级标题会成为一个节点。确保 Markdown 语法的正确性。

## 设计原则
1. **独立性**：每个测试用例应能独立执行，不依赖其他用例结果
2. **可重复性**：测试用例应能多次执行并得到一致结果
3. **可验证性**：预期结果必须具体且可验证
4. **清晰性**：测试步骤和预期结果描述清晰、无歧义
5. **完整性**：测试用例包含执行所需的全部信息
6. **覆盖率优先**：优先保证测试覆盖率，确保功能验证的完整性